import streamlit as st
import google.generativeai as genai  # Use Google's generative AI library

# Configure Gemini API
genai.configure(api_key="AIzaSyAuP6bX1RwtAhtDUr4mYMKLjlaETc0AMEY")
gemini_model = genai.GenerativeModel('gemini-pro')

# Streamlit App Config
st.set_page_config(
    page_title="AI Health & Fitness Planner",
    page_icon="üèãÔ∏è‚Äç‚ôÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom Styles
st.markdown("""
    <style>
    .main { padding: 2rem; }
    .stButton>button { width: 100%; }
    .stExpander { background-color: #002280; color: white; }
    .stExpander > div { color: white; }
    </style>
""", unsafe_allow_html=True)

# Input Fields
col1, col2 = st.columns(2)
with col1:
    age = st.number_input("Age", min_value=10, max_value=100)
    height = st.number_input("Height (cm)", min_value=100.0)
    activity_level = st.selectbox(
        "Activity Level",
        options=["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Extremely Active"]
    )

with col2:
    weight = st.number_input("Weight (kg)", min_value=20.0)
    sex = st.selectbox("Sex", options=["Male", "Female", "Other"])
    fitness_goals = st.selectbox(
        "Fitness Goals",
        options=["Lose Weight", "Gain Muscle", "Endurance", "Stay Fit", "Strength Training"]
    )
dietary_preferences = st.text_input("Dietary Preferences (e.g., Vegan, Keto)")

# User Profile
user_profile = f"""
Age: {age}
Weight: {weight} kg
Height: {height} cm
Sex: {sex}
Activity Level: {activity_level}
Dietary Preferences: {dietary_preferences}
Fitness Goals: {fitness_goals}
"""

# Prompt Templates
dietary_prompt = f"""
You are a dietary expert providing personalized meal plans based on the following user profile:
{user_profile}
Suggest a daily meal plan with breakfast, lunch, dinner, and snacks, with explanations.
"""

fitness_prompt = f"""
You are a fitness expert creating workout plans based on the following user profile:
{user_profile}
Include warm-ups, workouts, and cool-downs, with explanations for each exercise.
"""

# Generate Responses
def generate_response(prompt):
    response = gemini_model.generate_content(prompt)
    return response.text

dietary_plan_response = generate_response(dietary_prompt)
fitness_plan_response = generate_response(fitness_prompt)

# Display Plans
def display_plan(plan_content, plan_type):
    with st.expander(f"Your {plan_type} Plan", expanded=True):
        st.markdown("#### Goals")
        st.success(plan_content)
        st.markdown("### Routine")
        st.write(plan_content)

display_plan(dietary_plan_response, "Dietary")
display_plan(fitness_plan_response, "Fitness")

# Q&A Section
question = st.text_input("Questions about your plan?")
if question:
    context = f"{dietary_plan_response}\n{fitness_plan_response}\n{question}"
    answer = generate_response(context)
    st.write(answer)
