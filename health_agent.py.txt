import streamlit as st
from phi.agent import Agent
from phi.model.google import Gemini

st.set_page_config(
    page_title="AI Health & Fitness Planner",
    page_icon="üèãÔ∏è‚Äç‚ôÇÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
    <style>
    .main { padding: 2rem; }
    .stButton>button { width: 100%; }
    .stExpander { background-color: #002280; color: white; } /* Navy background with white text */
    .stExpander > div { color: white; } /* Ensure nested text is also white */
    </style>
""", unsafe_allow_html=True)

dietary_agent = Agent(
                        name="Dietary Expert",
                        role="Provides personalized dietary recommendations",
                        model=gemini_model,
                        instructions=[
                            "Consider the user's input, including dietary restrictions and preferences.",
                            "Suggest a detailed meal plan for the day, including breakfast, lunch, dinner, and snacks.",
                            "Provide a brief explanation of why the plan is suited to the user's goals.",
                            "Focus on clarity, coherence, and quality of the recommendations.",
                        ]
                    )

   fitness_agent = Agent(
                        name="Fitness Expert",
                        role="Provides personalized fitness recommendations",
                        model=gemini_model,
                        instructions=[
                            "Provide exercises tailored to the user's goals.",
                            "Include warm-up, main workout, and cool-down exercises.",
                            "Explain the benefits of each recommended exercise.",
                            "Ensure the plan is actionable and detailed.",
                        ]
                    )

col1, col2 = st.columns(2)
        
with col1:
    age = st.number_input("Age", min_value=10, max_value=100)
    height = st.number_input("Height (cm)", min_value=100.0)
    activity_level = st.selectbox("Activity Level",options=["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Extremely Active"],


with col2:
    weight = st.number_input("Weight (kg)", min_value=20.0)
    sex = st.selectbox("Sex", options=["Male", "Female", "Other"])
    fitness_goals = st.selectbox("Fitness Goals",options=["Lose Weight", "Gain Muscle", "Endurance", "Stay Fit", "Strength Training"])

user_profile = f"""
Age: {age}
Weight: {weight}kg
Height: {height}cm
Sex: {sex}
Activity Level: {activity_level}
Dietary Preferences: {dietary_preferences}
Fitness Goals: {fitness_goals}
"""
dietary_plan_response = dietary_agent.run(user_profile)
fitness_plan_response = fitness_agent.run(user_profile)

def display-plan (plan_content, plan_type) :
  with st.expander(f"Your {plan_type) Plan", expanded=True) :
    st.markdown ("#### Goals")
    st. success(plan_content.get ("goals" ))
    st.markdown ("### Routine")
    st.write(plan_content.get ("routine") )

question = st. text_input ("Questions about your plan?")
if question:
   context = f"{dietary_plan}\n{fitness_plan}\n{question}"
   answer = Agent(model=gemini_model). run (context)
   st.write (answer)